# Set rpi-k8s-master hostname
- name: Set hostname rpi-k8s-master
  shell: hostnamectl set-hostname rpi-k8s-master
  when: ansible_default_ipv4.address == IpAddress.k8s_master

# Set rpi-k8s-node-1 hostname
- name: Set hostname rpi-k8s-node-1
  shell: hostnamectl set-hostname rpi-k8s-node-1
  when: ansible_default_ipv4.address == IpAddress.k8s_node_1

#Set rpi-k8s-node-2 hostname
- name: Set hostname rpi-k8s-node-2
  shell: hostnamectl set-hostname rpi-k8s-node-2
  when: ansible_default_ipv4.address == IpAddress.k8s_node_2

# Set /etc/hosts
- name: Set /etc/hosts
  shell: echo '{{ IpAddress.k8s_master }} rpi-k8s-master\n{{ IpAddress.k8s_node_1 }} rpi-k8s-node-1\n{{ IpAddress.k8s_node_2 }} rpi-k8s-node-2\n{{ IpAddress.k8s_storage }} rpi-k8s-storage' > /etc/hosts

# Install K8s components
- name: Get Kubernetes apt-get
  apt_key:
    url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
    state: present

- name: Add Kubernetes repo
  apt_repository:
    repo: deb http://apt.kubernetes.io/ kubernetes-xenial main
    state: present
    filename: kubernetes

- name: Install aptitude using apt
  apt:
    name: aptitude
    state: latest
    update_cache: yes
    force_apt_get: yes

- name: Install required system packages
  apt:
    name: "{{ packages }}"
    state: latest
    update_cache: yes

- name: Install K8s packages
  apt:
    name: "{{ K8s_packages }}"
    state: present
    update_cache: yes

- name: Add Docker GPG apt Key
  apt_key:
    url: https://download.docker.com/linux/ubuntu/gpg
    state: present

- name: Add Docker Repository
  apt_repository:
    repo: deb https://download.docker.com/linux/ubuntu bionic stable
    state: present

- name: Update apt and install docker-ce
  apt:
    update_cache: yes
    name: docker-ce
    state: latest

- name: Install Docker Module for python
  pip:
    name: docker

- name: Prevent packages from being upgraded
  shell:
    cmd: |
      dpkg --set-selections << EOF
      kubeadm hold
      kubelet hold
      kubectl hold
      EOF
    warn: false

- name: remove swap file
  mount:
    name: swap
    fstype: swap
    state: absent

- name: Disable swap
  command: swapoff -a

- name: create daemon.json file - cgroupdriver
  shell: |
    cat > /etc/docker/daemon.json  << EOF
     {
       "exec-opts": ["native.cgroupdriver=systemd"],
       "log-driver": "json-file",
       "log-opts": {
         "max-size": "100m"
       },
       "storage-driver": "overlay2"
     }
     EOF

- name: Enable cgroups limit support
  shell: sudo sed -i '$ s/$/ cgroup_enable=cpuset cgroup_enable=memory cgroup_memory=1 swapaccount=1/' /boot/firmware/cmdline.txt
  register: cgroups_task

- name: Set timezone
  command: /usr/bin/timedatectl set-timezone {{ TimeZone }}
  become: yes

- name: Reboot immediately if there was a change.
  shell: "sleep 5 && reboot"
  async: 1
  poll: 0
  when: cgroups_task is changed

- name: Wait for the reboot to complete if there was a change.
  wait_for_connection:
    connect_timeout: 20
    sleep: 5
    delay: 5
    timeout: 300
  when: cgroups_task is changed
